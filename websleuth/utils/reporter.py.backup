#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Reporter Module for WebSleuth
"""

import os
import json
import datetime
from rich.console import Console

console = Console()

# Custom JSON encoder to handle datetime objects
class DateTimeEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, (datetime.datetime, datetime.date)):
            return obj.isoformat()
        return super().default(obj)

class Reporter:
    """Class for generating reports from scan results."""
    
    def __init__(self, url, results, output_dir):
        """Initialize the Reporter class.
        
        Args:
            url (str): The target URL.
            results (dict): The scan results.
            output_dir (str): The output directory.
        """
        self.url = url
        self.results = results
        self.output_dir = output_dir
        self.timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Ensure the output directory exists
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
    
    def generate_html_report(self):
        """Generate an HTML report of the scan results."""
        try:
            # Create a simplified HTML report template
            html_parts = []
            html_parts.append("<!DOCTYPE html>")
            html_parts.append("<html lang='en'>")
            html_parts.append("<head>")
            html_parts.append("    <meta charset='UTF-8'>")
            html_parts.append("    <meta name='viewport' content='width=device-width, initial-scale=1.0'>")
            html_parts.append("    <title>WebSleuth Report - {}</title>".format(self.url))
            html_parts.append("    <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css'>")
            html_parts.append("    <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css'>")
            html_parts.append("    <style>")
            html_parts.append("        body { font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f5f5f5; }")
            html_parts.append("        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }")
            html_parts.append("        .header { background-color: #2c3e50; color: white; padding: 20px; margin-bottom: 20px; border-radius: 5px; }")
            html_parts.append("        .card { background-color: white; border-radius: 5px; padding: 20px; margin-bottom: 20px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }")
            html_parts.append("        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }")
            html_parts.append("        th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }")
            html_parts.append("        th { background-color: #f2f2f2; }")
            html_parts.append("        .footer { text-align: center; margin-top: 20px; color: #777; font-size: 0.9em; }")
            html_parts.append("    </style>")
            html_parts.append("</head>")
            html_parts.append("<body>")
            html_parts.append("    <div class='container'>")
            html_parts.append("        <div class='header'>")
            html_parts.append("            <h1>WebSleuth Scan Report</h1>")
            html_parts.append("            <p>Target: <strong>{}</strong></p>".format(self.url))
            html_parts.append("            <p>Scan completed on: <strong>{}</strong></p>".format(self.timestamp))
            html_parts.append("        </div>")

            # Summary section
            html_parts.append("        <div class='card'>")
            html_parts.append("            <h2>Summary</h2>")
            html_parts.append("            <div class='row'>")
            html_parts.append("                <div class='col-md-3'>")
            html_parts.append("                    <div class='card text-center'>")
            html_parts.append("                        <h4>Subdomains</h4>")
            html_parts.append("                        <p class='display-4'>{}</p>".format(
                self.results.get('subdomain_enum', {}).get('total_found', 0)
            ))
            html_parts.append("                    </div>")
            html_parts.append("                </div>")
            html_parts.append("                <div class='col-md-3'>")
            html_parts.append("                    <div class='card text-center'>")
            html_parts.append("                        <h4>Vulnerabilities</h4>")
            html_parts.append("                        <p class='display-4'>{}</p>".format(
                self.results.get('vuln_scanner', {}).get('total_vulns', 0)
            ))
            html_parts.append("                    </div>")
            html_parts.append("                </div>")
            html_parts.append("                <div class='col-md-3'>")
            html_parts.append("                    <div class='card text-center'>")
            html_parts.append("                        <h4>Discovered Paths</h4>")
            html_parts.append("                        <p class='display-4'>{}</p>".format(
                self.results.get('content_discovery', {}).get('total_found', 0)
            ))
            html_parts.append("                    </div>")
            html_parts.append("                </div>")
            html_parts.append("                <div class='col-md-3'>")
            html_parts.append("                    <div class='card text-center'>")
            html_parts.append("                        <h4>Open Ports</h4>")
            html_parts.append("                        <p class='display-4'>{}</p>".format(
                len(self.results.get('port_scanner', {}).get('open_ports', []))
            ))
            html_parts.append("                    </div>")
            html_parts.append("                </div>")
            html_parts.append("            </div>")
            html_parts.append("        </div>")

            # Technologies section if available
            if 'technology_scanner' in self.results:
                tech_results = self.results['technology_scanner']
                html_parts.append("        <div class='card'>")
                html_parts.append("            <h2>Technologies</h2>")
                
                if tech_results.get('server'):
                    html_parts.append("            <h3>Server</h3>")
                    html_parts.append("            <p>{}</p>".format(tech_results.get('server')))
                
                if tech_results.get('cms'):
                    html_parts.append("            <h3>CMS</h3>")
                    html_parts.append("            <p>{}</p>".format(tech_results.get('cms')))
                
                if tech_results.get('frameworks'):
                    html_parts.append("            <h3>Frameworks</h3>")
                    html_parts.append("            <ul>")
                    for framework in tech_results.get('frameworks', []):
                        html_parts.append("                <li>{}</li>".format(framework))
                    html_parts.append("            </ul>")
                
                if tech_results.get('languages'):
                    html_parts.append("            <h3>Languages</h3>")
                    html_parts.append("            <ul>")
                    for language in tech_results.get('languages', []):
                        html_parts.append("                <li>{}</li>".format(language))
                    html_parts.append("            </ul>")
                
                if tech_results.get('javascript_libraries'):
                    html_parts.append("            <h3>JavaScript Libraries</h3>")
                    html_parts.append("            <ul>")
                    for library in tech_results.get('javascript_libraries', []):
                        html_parts.append("                <li>{}</li>".format(library))
                    html_parts.append("            </ul>")
                
                html_parts.append("        </div>")

            # Other potential sections would go here
            
            # Footer
            html_parts.append("        <div class='footer'>")
            html_parts.append("            <p>Generated by <strong>WebSleuth</strong> - Advanced Website OSINT and Penetration Testing Tool</p>")
            html_parts.append("            <p>Author: <a href='https://github.com/Triotion' target='_blank'>Triotion</a></p>")
            html_parts.append("        </div>")
            html_parts.append("    </div>")
            html_parts.append("</body>")
            html_parts.append("</html>")
            
            # Join all HTML parts
            report_html = "\n".join(html_parts)
            
            # Write the HTML report to a file
            report_path = os.path.join(self.output_dir, 'report.html')
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(report_html)
            
            console.print(f"[bold green]HTML report saved to {report_path}[/bold green]")
            return report_path
            
        except Exception as e:
            console.print(f"[bold red]Error generating HTML report: {str(e)}[/bold red]")
            return None
    
    def generate_json_report(self):
        """Generate a JSON report of the scan results."""
        try:
            report_data = {
                "target": self.url,
                "timestamp": self.timestamp,
                "results": self.results
            }
            
            report_path = os.path.join(self.output_dir, 'report.json')
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=4, cls=DateTimeEncoder)
            
            console.print(f"[bold green]JSON report saved to {report_path}[/bold green]")
            return report_path
            
        except Exception as e:
            console.print(f"[bold red]Error generating JSON report: {str(e)}[/bold red]")
            return None
    
    def generate_pdf_report(self):
        """Generate a PDF report of the scan results."""
        try:
            # For PDF generation, we'll use the HTML report and convert it
            # Since this requires additional dependencies, we'll just leave a stub
            html_report_path = self.generate_html_report()
            
            if html_report_path:
                pdf_report_path = os.path.join(self.output_dir, 'report.pdf')
                
                console.print("[bold yellow]PDF generation requires additional libraries.[/bold yellow]")
                console.print("[bold yellow]To generate PDF reports, install 'weasyprint' package.[/bold yellow]")
                console.print("[bold yellow]Then modify this method to use weasyprint for HTML to PDF conversion.[/bold yellow]")
                
                # Commented implementation for anyone who wants to add PDF support
                """
                from weasyprint import HTML
                HTML(html_report_path).write_pdf(pdf_report_path)
                console.print(f"[bold green]PDF report saved to {pdf_report_path}[/bold green]")
                """
                
                return pdf_report_path
            
        except Exception as e:
            console.print(f"[bold red]Error generating PDF report: {str(e)}[/bold red]")
            return None